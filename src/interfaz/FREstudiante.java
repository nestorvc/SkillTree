package interfaz;

import datos.Curso;
import datos.MallaCurricular;
import datos.Periodo;
import datos.Usuario;
import general.TipoProceso;
import java.awt.Color;
import java.io.Serializable;
import java.util.ArrayList;
import javax.swing.*;
import ui.UIAplicacion;

/**
 *
 * @author NÃ©stor Villalobos
 */
public class FREstudiante extends javax.swing.JFrame implements Serializable{

    //ATRIBUTOS
    private UIAplicacion ui;
    private Usuario estudiante;
    private MallaCurricular mallaEstudiante;
    //Flags
    private boolean cursoBotonSeleccionado;
    //Interfaz
    private ArrayList<ArrayList> periodosPintados = new ArrayList<ArrayList>();
    private Curso cursoSeleccionado;
    private JToggleButton botonSeleccionado;

    //CONSTRUCTORES
    public FREstudiante(UIAplicacion ui, Usuario estudiante) {
        initComponents();
        this.ui = ui;
        this.estudiante = estudiante;
        cursoBotonSeleccionado = false;
        cursoSeleccionado = null;
        chkLevantamiento.setVisible(false);
        sincronizar();
        interfaz();
    }

    //GETS&SETS
    public UIAplicacion getUi() {
        return ui;
    }

    public void setUi(UIAplicacion ui) {
        this.ui = ui;
    }
    
    public Usuario getEstudiante() {
        return estudiante;
    }

    public void setEstudiante(Usuario estudiante) {
        this.estudiante = estudiante;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngTipoUsuario = new javax.swing.ButtonGroup();
        btngCursos = new javax.swing.ButtonGroup();
        btngPeriodos = new javax.swing.ButtonGroup();
        pnlFondo = new javax.swing.JPanel();
        pnlTitular = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        pnlCrearModificar = new javax.swing.JPanel();
        lblMensaje = new javax.swing.JLabel();
        scpPanelCursos = new javax.swing.JScrollPane();
        pnlCursos = new javax.swing.JPanel();
        pnlResumenMalla = new javax.swing.JPanel();
        lblMallaDatos = new javax.swing.JLabel();
        lblMallaResumen = new javax.swing.JLabel();
        lblCurso = new javax.swing.JLabel();
        txtCurso = new javax.swing.JTextField();
        pnlEstadoOff = new javax.swing.JPanel();
        lblRequisitos = new javax.swing.JLabel();
        cmbRequisitos = new javax.swing.JComboBox();
        lblHoras = new javax.swing.JLabel();
        txtHoras = new javax.swing.JTextField();
        lblCreditos = new javax.swing.JLabel();
        txtCreditos = new javax.swing.JTextField();
        pnlEstadoOn = new javax.swing.JPanel();
        lblNota = new javax.swing.JLabel();
        spnNota = new javax.swing.JSpinner();
        lblVeces = new javax.swing.JLabel();
        spnVeces = new javax.swing.JSpinner();
        lblProceso = new javax.swing.JLabel();
        cmbProceso = new javax.swing.JComboBox();
        btnGuardar = new javax.swing.JButton();
        chkEstado = new javax.swing.JCheckBox();
        lblEstado = new javax.swing.JLabel();
        chkLevantamiento = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pnlFondo.setBackground(new java.awt.Color(255, 255, 255));
        pnlFondo.setPreferredSize(new java.awt.Dimension(500, 600));
        pnlFondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlTitular.setBackground(new java.awt.Color(0, 0, 0));
        pnlTitular.setPreferredSize(new java.awt.Dimension(500, 40));

        lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/skilltree_logo.png"))); // NOI18N
        lblLogo.setToolTipText("");
        lblLogo.setPreferredSize(new java.awt.Dimension(100, 30));

        lblUsername.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(153, 153, 153));
        lblUsername.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUsername.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tab.png"))); // NOI18N
        lblUsername.setText("Username");
        lblUsername.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblUsername.setPreferredSize(new java.awt.Dimension(70, 30));
        lblUsername.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblUsernameMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblUsernameMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblUsernameMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnlTitularLayout = new javax.swing.GroupLayout(pnlTitular);
        pnlTitular.setLayout(pnlTitularLayout);
        pnlTitularLayout.setHorizontalGroup(
            pnlTitularLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitularLayout.createSequentialGroup()
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 302, Short.MAX_VALUE)
                .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlTitularLayout.setVerticalGroup(
            pnlTitularLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pnlFondo.add(pnlTitular, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pnlCrearModificar.setBackground(new java.awt.Color(255, 255, 255));
        pnlCrearModificar.setLayout(null);

        lblMensaje.setForeground(new java.awt.Color(204, 0, 0));
        lblMensaje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMensaje.setPreferredSize(new java.awt.Dimension(480, 20));
        pnlCrearModificar.add(lblMensaje);
        lblMensaje.setBounds(10, 11, 480, 20);

        pnlCursos.setBackground(new java.awt.Color(235, 235, 235));
        pnlCursos.setAutoscrolls(true);
        pnlCursos.setMaximumSize(new java.awt.Dimension(498, 308));
        pnlCursos.setMinimumSize(new java.awt.Dimension(498, 308));
        pnlCursos.setLayout(null);
        scpPanelCursos.setViewportView(pnlCursos);

        pnlCrearModificar.add(scpPanelCursos);
        scpPanelCursos.setBounds(0, 260, 500, 300);

        pnlResumenMalla.setBackground(new java.awt.Color(204, 204, 204));
        pnlResumenMalla.setPreferredSize(new java.awt.Dimension(500, 14));

        lblMallaDatos.setForeground(new java.awt.Color(102, 102, 102));
        lblMallaDatos.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        lblMallaResumen.setForeground(new java.awt.Color(102, 102, 102));
        lblMallaResumen.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout pnlResumenMallaLayout = new javax.swing.GroupLayout(pnlResumenMalla);
        pnlResumenMalla.setLayout(pnlResumenMallaLayout);
        pnlResumenMallaLayout.setHorizontalGroup(
            pnlResumenMallaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResumenMallaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMallaDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(lblMallaResumen, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlResumenMallaLayout.setVerticalGroup(
            pnlResumenMallaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResumenMallaLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlResumenMallaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMallaResumen, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMallaDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlCrearModificar.add(pnlResumenMalla);
        pnlResumenMalla.setBounds(0, 246, 500, 14);

        lblCurso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCurso.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCurso.setText("Curso:");
        pnlCrearModificar.add(lblCurso);
        lblCurso.setBounds(30, 50, 100, 15);

        txtCurso.setEditable(false);
        txtCurso.setPreferredSize(new java.awt.Dimension(235, 30));
        pnlCrearModificar.add(txtCurso);
        txtCurso.setBounds(140, 40, 258, 29);

        pnlEstadoOff.setBackground(new java.awt.Color(255, 255, 255));

        lblRequisitos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblRequisitos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRequisitos.setText("Requisitos:");

        lblHoras.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHoras.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblHoras.setText("Horas:");

        txtHoras.setEditable(false);

        lblCreditos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCreditos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCreditos.setText("CrÃ©ditos:");

        txtCreditos.setEditable(false);

        javax.swing.GroupLayout pnlEstadoOffLayout = new javax.swing.GroupLayout(pnlEstadoOff);
        pnlEstadoOff.setLayout(pnlEstadoOffLayout);
        pnlEstadoOffLayout.setHorizontalGroup(
            pnlEstadoOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadoOffLayout.createSequentialGroup()
                .addGroup(pnlEstadoOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlEstadoOffLayout.createSequentialGroup()
                        .addComponent(lblRequisitos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(cmbRequisitos, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEstadoOffLayout.createSequentialGroup()
                        .addComponent(lblHoras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11)
                        .addComponent(txtHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCreditos, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCreditos, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlEstadoOffLayout.setVerticalGroup(
            pnlEstadoOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadoOffLayout.createSequentialGroup()
                .addGroup(pnlEstadoOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEstadoOffLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblRequisitos))
                    .addComponent(cmbRequisitos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(pnlEstadoOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCreditos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlEstadoOffLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlEstadoOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHoras)
                            .addComponent(lblCreditos))))
                .addGap(0, 50, Short.MAX_VALUE))
        );

        pnlCrearModificar.add(pnlEstadoOff);
        pnlEstadoOff.setBounds(30, 110, 200, 120);

        pnlEstadoOn.setBackground(new java.awt.Color(255, 255, 255));

        lblNota.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNota.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNota.setText("Nota:");

        spnNota.setModel(new javax.swing.SpinnerNumberModel(70, 70, 100, 1));

        lblVeces.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblVeces.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblVeces.setText("Veces cursado:");

        spnVeces.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        lblProceso.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblProceso.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblProceso.setText("Proceso:");

        cmbProceso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ordinario", "AmpliaciÃ³n", "Suficiencia" }));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEstadoOnLayout = new javax.swing.GroupLayout(pnlEstadoOn);
        pnlEstadoOn.setLayout(pnlEstadoOnLayout);
        pnlEstadoOnLayout.setHorizontalGroup(
            pnlEstadoOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEstadoOnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlEstadoOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblProceso, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(lblNota, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(pnlEstadoOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlEstadoOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmbProceso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEstadoOnLayout.createSequentialGroup()
                            .addComponent(spnNota)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblVeces, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(spnVeces, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(58, 58, 58))
        );
        pnlEstadoOnLayout.setVerticalGroup(
            pnlEstadoOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadoOnLayout.createSequentialGroup()
                .addGroup(pnlEstadoOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnVeces, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVeces)
                    .addComponent(spnNota, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNota))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadoOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEstadoOnLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblProceso))
                    .addComponent(cmbProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        pnlCrearModificar.add(pnlEstadoOn);
        pnlEstadoOn.setBounds(260, 110, 210, 120);

        chkEstado.setBackground(new java.awt.Color(255, 255, 255));
        chkEstado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkEstado.setText("Aprobado");
        chkEstado.setEnabled(false);
        chkEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEstadoActionPerformed(evt);
            }
        });
        pnlCrearModificar.add(chkEstado);
        chkEstado.setBounds(140, 80, 90, 23);

        lblEstado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEstado.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEstado.setText("Estado:");
        pnlCrearModificar.add(lblEstado);
        lblEstado.setBounds(26, 85, 100, 15);

        chkLevantamiento.setBackground(new java.awt.Color(255, 255, 255));
        chkLevantamiento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkLevantamiento.setText("Levantar requisitos");
        chkLevantamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLevantamientoActionPerformed(evt);
            }
        });
        pnlCrearModificar.add(chkLevantamiento);
        chkLevantamiento.setBounds(270, 80, 130, 23);

        pnlFondo.add(pnlCrearModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 500, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlFondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlFondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblUsernameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMouseClicked
        FRLogin ventana = new FRLogin(this.ui);
        ventana.setUi(ui);
        ventana.show();
        this.dispose();
    }//GEN-LAST:event_lblUsernameMouseClicked

    private void lblUsernameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMouseEntered

        lblUsername.setText("Salir");
        lblUsername.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tab_on.png")));
        lblUsername.setForeground(Color.white);
    }
//GEN-LAST:event_lblUsernameMouseEntered
        private void lblUsernameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMouseExited
            lblUsername.setText(estudiante.getLogin());
            lblUsername.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tab.png")));
            lblUsername.setForeground(new Color(153, 153, 153));
    }//GEN-LAST:event_lblUsernameMouseExited

    private void chkEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEstadoActionPerformed
        interfaz();
        if (!chkEstado.isSelected()){            
            int periodo = ui.periodoDelCursoEnMalla(mallaEstudiante, cursoSeleccionado);
            mallaEstudiante.getPeriodos()[periodo].modificarCurso(cursoSeleccionado, -1, TipoProceso.Ordinario, 1, false, false);
            sincronizar();
        }
    }//GEN-LAST:event_chkEstadoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        int periodo = ui.periodoDelCursoEnMalla(mallaEstudiante, cursoSeleccionado);
        int nota = (Integer) spnNota.getValue();
        int veces = (Integer) spnVeces.getValue();
        TipoProceso tipo = null;
        if (cmbProceso.getSelectedItem().equals("Ordinario")) tipo = TipoProceso.Ordinario;
        else if (cmbProceso.getSelectedItem().equals("AmpliaciÃ³n")) tipo = TipoProceso.Ampliacion;
        else if (cmbProceso.getSelectedItem().equals("Suficiencia")) tipo = TipoProceso.Suficiencia;
        boolean aprobado = chkEstado.isSelected();
        boolean levantamiento = ui.tieneLevantamientoDeRequisitos(cursoSeleccionado, mallaEstudiante);
        mallaEstudiante.getPeriodos()[periodo].modificarCurso(cursoSeleccionado, nota, tipo, veces, aprobado, levantamiento);

        lblMensaje.setText("Curso modificado.");
        lblMensaje.setForeground(Color.black);    
        sincronizar();
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void chkLevantamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLevantamientoActionPerformed
        interfaz();           
        int periodo = ui.periodoDelCursoEnMalla(mallaEstudiante, cursoSeleccionado);
        mallaEstudiante.getPeriodos()[periodo].modificarCurso(cursoSeleccionado, -1, TipoProceso.Ordinario, 1, false, true);
        sincronizar();
        chkLevantamiento.setVisible(false);        
    }//GEN-LAST:event_chkLevantamientoActionPerformed

    private void btnCursoMouseClicked(java.awt.event.MouseEvent evt) {                                           
        limpiar();
        cursoBotonSeleccionado = true;
        botonSeleccionado = (JToggleButton) evt.getSource();
        cursoSeleccionado = deStringACurso(botonSeleccionado.getToolTipText());
        
        if(!botonSeleccionado.isEnabled())chkLevantamiento.setVisible(true);
        else chkLevantamiento.setVisible(false);
        
        //Primer reestablece los atributos visuales de todos los cursos/botones
        pintarCursosDefault();
        //Luego pinta los especificos
        pintarRequisitos(cursoSeleccionado);        
        pintarCursosDependientes(cursoSeleccionado);
        pintarRestringidos();
                
        lblMensaje.setText("Se han seÃ±alado de color rojo los requisitos y de verde los otros cursos que habilita este curso.");
        lblMensaje.setForeground(Color.black);
        cargarVistaCursoSeleccionado(cursoSeleccionado);
        chkEstado.setEnabled(botonSeleccionado.isEnabled());
        botonSeleccionado.setSelected(true);
        botonSeleccionado.setFocusPainted(true);
        interfaz();        
    }  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.ButtonGroup btngCursos;
    private javax.swing.ButtonGroup btngPeriodos;
    private javax.swing.ButtonGroup btngTipoUsuario;
    private javax.swing.JCheckBox chkEstado;
    private javax.swing.JCheckBox chkLevantamiento;
    private javax.swing.JComboBox cmbProceso;
    private javax.swing.JComboBox cmbRequisitos;
    private javax.swing.JLabel lblCreditos;
    private javax.swing.JLabel lblCurso;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblHoras;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblMallaDatos;
    private javax.swing.JLabel lblMallaResumen;
    private javax.swing.JLabel lblMensaje;
    private javax.swing.JLabel lblNota;
    private javax.swing.JLabel lblProceso;
    private javax.swing.JLabel lblRequisitos;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblVeces;
    private javax.swing.JPanel pnlCrearModificar;
    private javax.swing.JPanel pnlCursos;
    private javax.swing.JPanel pnlEstadoOff;
    private javax.swing.JPanel pnlEstadoOn;
    private javax.swing.JPanel pnlFondo;
    private javax.swing.JPanel pnlResumenMalla;
    private javax.swing.JPanel pnlTitular;
    private javax.swing.JScrollPane scpPanelCursos;
    private javax.swing.JSpinner spnNota;
    private javax.swing.JSpinner spnVeces;
    private javax.swing.JTextField txtCreditos;
    private javax.swing.JTextField txtCurso;
    private javax.swing.JTextField txtHoras;
    // End of variables declaration//GEN-END:variables

    //OTROS MÃTODOS
    public void limpiar() {
        txtCurso.setText("");
        chkEstado.setSelected(false);
        txtHoras.setText("");
        txtCreditos.setText("");
        spnNota.setValue(70);
        spnVeces.setValue(1);
        cmbProceso.setSelectedIndex(0);
        chkLevantamiento.setSelected(false);
    }

    public void interfaz() {

        if (!chkEstado.isSelected()) {
            pnlEstadoOn.setBounds(260, 110, 210, 120); //ESCONDIDO
            pnlEstadoOff.setBounds(30, 110, 430, 120); //NO ESCONDIDO
            pnlEstadoOff.setVisible(true);
            pnlEstadoOn.setVisible(false);
        }
        if (chkEstado.isSelected()) {
            pnlEstadoOn.setBounds(30, 110, 430, 120); //NO ESCONDIDO
            pnlEstadoOff.setBounds(30, 110, 200, 120); //ESCONDIDO
            pnlEstadoOff.setVisible(false);
            pnlEstadoOn.setVisible(true);
        }
                
        lblUsername.setText(estudiante.getLogin());
    }

    public void pintarPeriodos() {
        Periodo[] periodos = mallaEstudiante.getPeriodos();
        periodosPintados.clear();

        //Flag para colorear
        boolean cambioColor = false;

        //Coordenadas para pintar
        int xPnlInicial = 0;
        int yPnlInicial = 0;
        int xLblInicial = 10;
        int yLblInicial = 5;

        for (int i = 0; i < periodos.length; i++) {

            //Se crea el pnlPeriodoX
            JPanel pnlPeriodoX = new JPanel();
            pnlPeriodoX.setName("pnlPeriodo" + (i + 1));
            if (cambioColor) {
                pnlPeriodoX.setBackground(new java.awt.Color(235, 235, 235));
                cambioColor = false;
            } else {
                pnlPeriodoX.setBackground(new java.awt.Color(245, 245, 245));
                cambioColor = true;
            }
            pnlPeriodoX.setMaximumSize(new java.awt.Dimension(60, 1000));
            pnlPeriodoX.setLayout(null);

            //Se crea el lblPeriodoX
            JLabel lblPeriodoX = new JLabel();
            lblPeriodoX.setText((i + 1) + "P");
            lblPeriodoX.setHorizontalAlignment(SwingConstants.CENTER);
            lblPeriodoX.setOpaque(false);
            pnlPeriodoX.add(lblPeriodoX);
            lblPeriodoX.setBounds(xLblInicial, yLblInicial, 40, 23);


            //Se aÃ±aden los objetos a un ArrayList por Panel para mayor orden de datos
            ArrayList<Object> proxPanelesPintados = new ArrayList<Object>();

            //Se crea de una vez un ArrayList que guardarÃ¡ los cursos que se vaya a pintar por Panel
            ArrayList<Object> proxCursosPintados = new ArrayList<Object>();
            //Por cada curso creado en este ArrayList, se guardarÃ¡ el botÃ³n que lo representa y su data tipo Curso
            ArrayList<JToggleButton> botonCursosPintado = new ArrayList<JToggleButton>();
            ArrayList<Curso> dataCursosPintado = new ArrayList<Curso>();
            proxCursosPintados.add(0, botonCursosPintado);
            proxCursosPintados.add(1, dataCursosPintado);

            //Al ArrayList de data general se le establece que siempre por periodo va a tener un Panel, un RadioButton, y un ArrayList de los Cursos agregados a este (que a su vez tiene la info del JToggleButton y el dato tipo Curso) 
            proxPanelesPintados.add(0, pnlPeriodoX);
            proxPanelesPintados.add(1, lblPeriodoX);
            proxPanelesPintados.add(2, proxCursosPintados);

            //Se aÃ±aden al ArrayList general de periodosPintados
            periodosPintados.add(i, proxPanelesPintados);

            //Se pinta el pnlPeriodoX al pnlCursos
            pnlCursos.add(pnlPeriodoX);
            pnlPeriodoX.setBounds(xPnlInicial, yPnlInicial, 60, 310);

            //Nuevas coordenadas para el siguiente pnlPeriodoX
            xPnlInicial = xPnlInicial + 60;
        }
    }

    public void pintarCursoAgregado(int periodo, Curso curso) {
        Icon icono = curso.getIcono();
        String toolTipText = curso.getCodigo() + " - " + curso.getNombre();

        JToggleButton tbtnCursoX = new JToggleButton();
        JPanel pnlPeriodoActual = (JPanel) periodosPintados.get(periodo).get(0);
        ArrayList<Object> cursosPintadosDelPeriodoActual = (ArrayList<Object>) periodosPintados.get(periodo).get(2);
        ArrayList<JToggleButton> botonesPeriodoActual = (ArrayList<JToggleButton>) cursosPintadosDelPeriodoActual.get(0);
        ArrayList<Curso> dataPeriodoActual = (ArrayList<Curso>) cursosPintadosDelPeriodoActual.get(1);

        if (botonesPeriodoActual.isEmpty()) {
            int indice = 0;
            int xTbtn = 5;
            int yTbtn = 30;
            btngCursos.add(tbtnCursoX);
            tbtnCursoX.setPreferredSize(new java.awt.Dimension(50, 50));
            tbtnCursoX.setOpaque(true);
            tbtnCursoX.setBorderPainted(true);
            tbtnCursoX.setIcon(icono);
            tbtnCursoX.setToolTipText(toolTipText);
            tbtnCursoX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnCursoMouseClicked(evt);
                }
            });
            pnlPeriodoActual.add(tbtnCursoX);
            tbtnCursoX.setBounds(xTbtn, yTbtn, 50, 50);

            botonesPeriodoActual.add(indice, tbtnCursoX);
            dataPeriodoActual.add(indice, curso);
        } else {
            JToggleButton botonAnterior = botonesPeriodoActual.get(botonesPeriodoActual.size() - 1);
            int xTbtn = botonAnterior.getX();
            int yTbtn = botonAnterior.getY() + 53;
            btngCursos.add(tbtnCursoX);
            tbtnCursoX.setPreferredSize(new java.awt.Dimension(50, 50));
            tbtnCursoX.setIcon(icono);
            tbtnCursoX.setToolTipText(toolTipText);
            tbtnCursoX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnCursoMouseClicked(evt);
                }
            });
            pnlPeriodoActual.add(tbtnCursoX);
            tbtnCursoX.setBounds(xTbtn, yTbtn, 50, 50);

            botonesPeriodoActual.add(tbtnCursoX);
            dataPeriodoActual.add(curso);
        }
    }

    public void pintarCursosMalla() {
        Periodo[] periodos = mallaEstudiante.getPeriodos();
        ArrayList<Curso> cursos;
        for (int i = 0; i < periodos.length; i++) {
            int periodo = i;
            if (!periodos[i].getCursos().isEmpty()) {
                cursos = periodos[i].getCursos();
                for (int h = 0; h < cursos.size(); h++) {
                    Curso curso = cursos.get(h);
                    pintarCursoAgregado(periodo, curso);
                }
            }
        }
    }
    
    public void pintarCursosDefault(){
        ArrayList<JToggleButton> botones;
        ArrayList<ArrayList> cursos;
        
        for (int i = 0; i < periodosPintados.size(); i++) {
            cursos = (ArrayList<ArrayList>) periodosPintados.get(i).get(2);
            botones = cursos.get(0);
            for (int h = 0; h < botones.size(); h++) {
                JToggleButton botonActual = botones.get(h);
                botonActual.setOpaque(true);
                botonActual.setBorderPainted(true);
                botonActual.setBackground(new java.awt.Color(240, 240, 240));                     
            }
        }
    }
    
    public void pintarRequisitos(Curso curso) {
        ArrayList<Curso> requisitos = curso.getRequisitos();
        ArrayList<JToggleButton> botones;
        ArrayList<ArrayList> cursos;

        //Luego pinta solo los requisitos
        if (requisitos != null) {
            for (int i = 0; i < periodosPintados.size(); i++) {
                cursos = (ArrayList<ArrayList>) periodosPintados.get(i).get(2);
                botones = cursos.get(0);
                for (int h = 0; h < botones.size(); h++) {
                    JToggleButton botonActual = botones.get(h);
                    for (int j = 0; j < requisitos.size(); j++) {
                        String codigoNombre = requisitos.get(j).getCodigo() + " - " + requisitos.get(j).getNombre();
                        if (botonActual.getToolTipText().equals(codigoNombre)) {
                            botonActual.setBackground(new java.awt.Color(204, 0, 0));
                        }
                    }
                }
            }
        }
    }
    
    public void pintarCursosDependientes(Curso curso) {         
        ArrayList<Curso> cursosDependientes = ui.cursosDependientesDe(curso, mallaEstudiante);        
        ArrayList<JToggleButton> botones;
        ArrayList<ArrayList> cursos;

        //Luego pinta solo los requisitos
        if (cursosDependientes != null) {
            for (int i = 0; i < periodosPintados.size(); i++) {
                cursos = (ArrayList<ArrayList>) periodosPintados.get(i).get(2);
                botones = cursos.get(0);
                for (int h = 0; h < botones.size(); h++) {
                    JToggleButton botonActual = botones.get(h);
                    for (int j = 0; j < cursosDependientes.size(); j++) {
                        String codigoNombre = cursosDependientes.get(j).getCodigo() + " - " + cursosDependientes.get(j).getNombre();
                        if (botonActual.getToolTipText().equals(codigoNombre)) {
                            
                            //Pone un Ã­cono en blanco y negro
                            botonActual.setBackground(new java.awt.Color(0, 204, 0));
                        }
                    }
                }
            }
        }   
    }
    
    public void pintarRestringidos() {                
        ArrayList<JToggleButton> botones;
        ArrayList<ArrayList> cursos;

        for (int i = 0; i < periodosPintados.size(); i++) {
            cursos = (ArrayList<ArrayList>) periodosPintados.get(i).get(2);
            botones = cursos.get(0);
            for (int h = 0; h < botones.size(); h++) {
                JToggleButton botonActual = botones.get(h); 
                Curso cursoBoton = deStringACurso(botonActual.getToolTipText());
                botonActual.setEnabled(ui.cursoHabilitado(cursoBoton, mallaEstudiante));
            }
        }
    }

    public void cargarCmbRequisitos(Curso curso) {
        ArrayList<Curso> listaRequisitos = curso.getRequisitos();
        cmbRequisitos.removeAllItems();
        if (listaRequisitos != null) {
            for (int i = 0; i < listaRequisitos.size(); i++) {
                String requisito = listaRequisitos.get(i).getCodigo() + " - " + listaRequisitos.get(i).getNombre();
                cmbRequisitos.addItem(requisito);
            }
        }
    }

    public void cargarVistaCursoSeleccionado(Curso curso) {
        txtCurso.setText(curso.getCodigo() + " - " + curso.getNombre());
        cargarCmbRequisitos(curso);
        txtHoras.setText(curso.getHoras() + "");
        txtCreditos.setText(curso.getCreditos() + "");
        chkEstado.setSelected(curso.isAprobado());
        
        if (chkEstado.isSelected()){
            spnNota.setValue(curso.getNota());
            spnVeces.setValue(curso.getVecesCursado());
            TipoProceso tipo = curso.getTipoProceso();
            if (tipo == TipoProceso.Ampliacion) cmbProceso.setSelectedItem("AmpliaciÃ³n");
            else if (tipo == TipoProceso.Ordinario) cmbProceso.setSelectedItem("Ordinario");
            else if (tipo == TipoProceso.Suficiencia) cmbProceso.setSelectedItem("Suficiencia");
        }
    }

    public void cargarResumenMalla() {
        lblMallaDatos.setText("Promedio ponderado: "+ ui.promedioPonderado(estudiante));
        lblMallaResumen.setText(ui.resumenMalla(ui.getMalla()));
    }

    public int periodoSeleccionado() {
        int periodoSeleccionado = -1;
        for (int i = 0; i < periodosPintados.size(); i++) {
            ArrayList<Object> periodoX = periodosPintados.get(i);
            JRadioButton rbTemp = (JRadioButton) periodoX.get(1);
            if (rbTemp.isSelected()) {
                periodoSeleccionado = i;
            }
        }
        return periodoSeleccionado;
    }

    public Curso deStringACurso(String codigoNombre) {
        String codigo = codigoNombre.split(" - ")[0];
        String nombre = codigoNombre.split(" - ")[1];
        Curso curso = ui.buscarCurso(codigo, nombre);
        return curso;
    }

    public void repintar() {
        limpiar();
        pnlCursos.removeAll();
        pintarPeriodos();
        pintarCursosMalla();
        pintarCursosDefault();
        pintarRestringidos();
        cargarResumenMalla();
        interfaz();
    }
    
    public void sincronizar(){
        if(ui.isMallaCreada()){
            mallaEstudiante = ui.sincronizarMallaEstudiante(estudiante);
            estudiante.setMalla(mallaEstudiante);
            repintar();
        }
        else {
            lblMensaje.setText("No hay ninguna malla curricular habilitada. Solicite a su administrador que cree una.");
            lblMensaje.setForeground(Color.red);
        }
    }
}